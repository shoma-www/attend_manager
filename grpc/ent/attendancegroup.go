// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/shoma-www/attend_manager/grpc/ent/attendancegroup"
)

// AttendanceGroup is the model entity for the AttendanceGroup schema.
type AttendanceGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name *string `json:"Name,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttendanceGroupQuery when eager-loading is set.
	Edges AttendanceGroupEdges `json:"edges"`
}

// AttendanceGroupEdges holds the relations/edges for other nodes in the graph.
type AttendanceGroupEdges struct {
	// Users holds the value of the users edge.
	Users []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e AttendanceGroupEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttendanceGroup) scanValues() []interface{} {
	return []interface{}{
		&xid.ID{},         // id
		&sql.NullString{}, // Name
		&sql.NullTime{},   // CreatedAt
		&sql.NullTime{},   // UpdatedAt
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttendanceGroup fields.
func (ag *AttendanceGroup) assignValues(values ...interface{}) error {
	if m, n := len(values), len(attendancegroup.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*xid.ID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		ag.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Name", values[0])
	} else if value.Valid {
		ag.Name = new(string)
		*ag.Name = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field CreatedAt", values[1])
	} else if value.Valid {
		ag.CreatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field UpdatedAt", values[2])
	} else if value.Valid {
		ag.UpdatedAt = value.Time
	}
	return nil
}

// QueryUsers queries the users edge of the AttendanceGroup.
func (ag *AttendanceGroup) QueryUsers() *UserQuery {
	return (&AttendanceGroupClient{config: ag.config}).QueryUsers(ag)
}

// Update returns a builder for updating this AttendanceGroup.
// Note that, you need to call AttendanceGroup.Unwrap() before calling this method, if this AttendanceGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (ag *AttendanceGroup) Update() *AttendanceGroupUpdateOne {
	return (&AttendanceGroupClient{config: ag.config}).UpdateOne(ag)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ag *AttendanceGroup) Unwrap() *AttendanceGroup {
	tx, ok := ag.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttendanceGroup is not a transactional entity")
	}
	ag.config.driver = tx.drv
	return ag
}

// String implements the fmt.Stringer.
func (ag *AttendanceGroup) String() string {
	var builder strings.Builder
	builder.WriteString("AttendanceGroup(")
	builder.WriteString(fmt.Sprintf("id=%v", ag.ID))
	if v := ag.Name; v != nil {
		builder.WriteString(", Name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", CreatedAt=")
	builder.WriteString(ag.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", UpdatedAt=")
	builder.WriteString(ag.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AttendanceGroups is a parsable slice of AttendanceGroup.
type AttendanceGroups []*AttendanceGroup

func (ag AttendanceGroups) config(cfg config) {
	for _i := range ag {
		ag[_i].config = cfg
	}
}
