// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/shoma-www/attend_manager/grpc/ent/attendancegroup"
	"github.com/shoma-www/attend_manager/grpc/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// LoginID holds the value of the "LoginID" field.
	LoginID string `json:"LoginID,omitempty"`
	// Password holds the value of the "Password" field.
	Password string `json:"-"`
	// Name holds the value of the "Name" field.
	Name *string `json:"Name,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges                  UserEdges `json:"edges"`
	attendance_group_users *xid.ID
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Group holds the value of the group edge.
	Group *AttendanceGroup
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) GroupOrErr() (*AttendanceGroup, error) {
	if e.loadedTypes[0] {
		if e.Group == nil {
			// The edge group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attendancegroup.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&xid.ID{},         // id
		&sql.NullString{}, // LoginID
		&sql.NullString{}, // Password
		&sql.NullString{}, // Name
		&sql.NullTime{},   // CreatedAt
		&sql.NullTime{},   // UpdatedAt
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*User) fkValues() []interface{} {
	return []interface{}{
		&xid.ID{}, // attendance_group_users
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*xid.ID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		u.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field LoginID", values[0])
	} else if value.Valid {
		u.LoginID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Password", values[1])
	} else if value.Valid {
		u.Password = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Name", values[2])
	} else if value.Valid {
		u.Name = new(string)
		*u.Name = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field CreatedAt", values[3])
	} else if value.Valid {
		u.CreatedAt = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field UpdatedAt", values[4])
	} else if value.Valid {
		u.UpdatedAt = value.Time
	}
	values = values[5:]
	if len(values) == len(user.ForeignKeys) {
		if value, ok := values[0].(*xid.ID); !ok {
			return fmt.Errorf("unexpected type %T for field attendance_group_users", values[0])
		} else if value != nil {
			u.attendance_group_users = value
		}
	}
	return nil
}

// QueryGroup queries the group edge of the User.
func (u *User) QueryGroup() *AttendanceGroupQuery {
	return (&UserClient{config: u.config}).QueryGroup(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", LoginID=")
	builder.WriteString(u.LoginID)
	builder.WriteString(", Password=<sensitive>")
	if v := u.Name; v != nil {
		builder.WriteString(", Name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", CreatedAt=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", UpdatedAt=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
