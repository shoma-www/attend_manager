// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/rs/xid"
	"github.com/shoma-www/attend_manager/grpc/ent/attendancegroup"
	"github.com/shoma-www/attend_manager/grpc/ent/user"
)

// AttendanceGroupCreate is the builder for creating a AttendanceGroup entity.
type AttendanceGroupCreate struct {
	config
	mutation *AttendanceGroupMutation
	hooks    []Hook
}

// SetName sets the Name field.
func (agc *AttendanceGroupCreate) SetName(s string) *AttendanceGroupCreate {
	agc.mutation.SetName(s)
	return agc
}

// SetNillableName sets the Name field if the given value is not nil.
func (agc *AttendanceGroupCreate) SetNillableName(s *string) *AttendanceGroupCreate {
	if s != nil {
		agc.SetName(*s)
	}
	return agc
}

// SetCreatedAt sets the CreatedAt field.
func (agc *AttendanceGroupCreate) SetCreatedAt(t time.Time) *AttendanceGroupCreate {
	agc.mutation.SetCreatedAt(t)
	return agc
}

// SetNillableCreatedAt sets the CreatedAt field if the given value is not nil.
func (agc *AttendanceGroupCreate) SetNillableCreatedAt(t *time.Time) *AttendanceGroupCreate {
	if t != nil {
		agc.SetCreatedAt(*t)
	}
	return agc
}

// SetUpdatedAt sets the UpdatedAt field.
func (agc *AttendanceGroupCreate) SetUpdatedAt(t time.Time) *AttendanceGroupCreate {
	agc.mutation.SetUpdatedAt(t)
	return agc
}

// SetNillableUpdatedAt sets the UpdatedAt field if the given value is not nil.
func (agc *AttendanceGroupCreate) SetNillableUpdatedAt(t *time.Time) *AttendanceGroupCreate {
	if t != nil {
		agc.SetUpdatedAt(*t)
	}
	return agc
}

// SetID sets the id field.
func (agc *AttendanceGroupCreate) SetID(x xid.ID) *AttendanceGroupCreate {
	agc.mutation.SetID(x)
	return agc
}

// AddUserIDs adds the users edge to User by ids.
func (agc *AttendanceGroupCreate) AddUserIDs(ids ...xid.ID) *AttendanceGroupCreate {
	agc.mutation.AddUserIDs(ids...)
	return agc
}

// AddUsers adds the users edges to User.
func (agc *AttendanceGroupCreate) AddUsers(u ...*User) *AttendanceGroupCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return agc.AddUserIDs(ids...)
}

// Mutation returns the AttendanceGroupMutation object of the builder.
func (agc *AttendanceGroupCreate) Mutation() *AttendanceGroupMutation {
	return agc.mutation
}

// Save creates the AttendanceGroup in the database.
func (agc *AttendanceGroupCreate) Save(ctx context.Context) (*AttendanceGroup, error) {
	if err := agc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *AttendanceGroup
	)
	if len(agc.hooks) == 0 {
		node, err = agc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttendanceGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agc.mutation = mutation
			node, err = agc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(agc.hooks) - 1; i >= 0; i-- {
			mut = agc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (agc *AttendanceGroupCreate) SaveX(ctx context.Context) *AttendanceGroup {
	v, err := agc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (agc *AttendanceGroupCreate) preSave() error {
	if v, ok := agc.mutation.Name(); ok {
		if err := attendancegroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	return nil
}

func (agc *AttendanceGroupCreate) sqlSave(ctx context.Context) (*AttendanceGroup, error) {
	ag, _spec := agc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ag, nil
}

func (agc *AttendanceGroupCreate) createSpec() (*AttendanceGroup, *sqlgraph.CreateSpec) {
	var (
		ag    = &AttendanceGroup{config: agc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: attendancegroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: attendancegroup.FieldID,
			},
		}
	)
	if id, ok := agc.mutation.ID(); ok {
		ag.ID = id
		_spec.ID.Value = id
	}
	if value, ok := agc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attendancegroup.FieldName,
		})
		ag.Name = &value
	}
	if value, ok := agc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attendancegroup.FieldCreatedAt,
		})
		ag.CreatedAt = value
	}
	if value, ok := agc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attendancegroup.FieldUpdatedAt,
		})
		ag.UpdatedAt = value
	}
	if nodes := agc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attendancegroup.UsersTable,
			Columns: []string{attendancegroup.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return ag, _spec
}

// AttendanceGroupCreateBulk is the builder for creating a bulk of AttendanceGroup entities.
type AttendanceGroupCreateBulk struct {
	config
	builders []*AttendanceGroupCreate
}

// Save creates the AttendanceGroup entities in the database.
func (agcb *AttendanceGroupCreateBulk) Save(ctx context.Context) ([]*AttendanceGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(agcb.builders))
	nodes := make([]*AttendanceGroup, len(agcb.builders))
	mutators := make([]Mutator, len(agcb.builders))
	for i := range agcb.builders {
		func(i int, root context.Context) {
			builder := agcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*AttendanceGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (agcb *AttendanceGroupCreateBulk) SaveX(ctx context.Context) []*AttendanceGroup {
	v, err := agcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
