// Code generated by MockGen. DO NOT EDIT.
// Source: grpc/service/repository.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	xid "github.com/rs/xid"
	entity "github.com/shoma-www/attend_manager/grpc/entity"
	reflect "reflect"
)

// MockTransaction is a mock of Transaction interface
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Transaction mocks base method
func (m *MockTransaction) Transaction(ctx context.Context, target func(context.Context) (interface{}, error)) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, target)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction
func (mr *MockTransactionMockRecorder) Transaction(ctx, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockTransaction)(nil).Transaction), ctx, target)
}

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockUserRepository) Get(ctx context.Context, groupID xid.ID, loginID string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, groupID, loginID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserRepositoryMockRecorder) Get(ctx, groupID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), ctx, groupID, loginID)
}

// Register mocks base method
func (m *MockUserRepository) Register(ctx context.Context, groupID xid.ID, loginID, password, name string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, groupID, loginID, password, name)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockUserRepositoryMockRecorder) Register(ctx, groupID, loginID, password, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserRepository)(nil).Register), ctx, groupID, loginID, password, name)
}

// MockAttendanceGroupRepository is a mock of AttendanceGroupRepository interface
type MockAttendanceGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceGroupRepositoryMockRecorder
}

// MockAttendanceGroupRepositoryMockRecorder is the mock recorder for MockAttendanceGroupRepository
type MockAttendanceGroupRepositoryMockRecorder struct {
	mock *MockAttendanceGroupRepository
}

// NewMockAttendanceGroupRepository creates a new mock instance
func NewMockAttendanceGroupRepository(ctrl *gomock.Controller) *MockAttendanceGroupRepository {
	mock := &MockAttendanceGroupRepository{ctrl: ctrl}
	mock.recorder = &MockAttendanceGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAttendanceGroupRepository) EXPECT() *MockAttendanceGroupRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockAttendanceGroupRepository) Get(ctx context.Context, name string) (*entity.AttendanceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(*entity.AttendanceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAttendanceGroupRepositoryMockRecorder) Get(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAttendanceGroupRepository)(nil).Get), ctx, name)
}

// Create mocks base method
func (m *MockAttendanceGroupRepository) Create(ctx context.Context, name string) (*entity.AttendanceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name)
	ret0, _ := ret[0].(*entity.AttendanceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAttendanceGroupRepositoryMockRecorder) Create(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAttendanceGroupRepository)(nil).Create), ctx, name)
}
